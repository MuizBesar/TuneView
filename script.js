document.addEventListener('DOMContentLoaded', function() {
    // --- DOM Element References ---
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const searchView = document.getElementById('search-view');
    const resultsView = document.getElementById('results-view');
    const resultsTitle = document.getElementById('results-title');
    const queryDisplay = document.getElementById('query-display');
    const resultsList = document.getElementById('results-list');
    const loadingIndicator = document.getElementById('loading-indicator');
    const messageArea = document.getElementById('message-area');
    const previewDisclaimer = document.getElementById('preview-info');
    const pageTopLogo = document.getElementById('page-top-logo');
    const searchAnotherBtn = document.getElementById('search-another-random-btn');
    // Top Right Search Bar references
    const topRightSearchContainer = document.getElementById('top-right-search-container');
    const topRightSearchForm = document.getElementById('top-right-search-form');
    const topRightSearchInput = document.getElementById('top-right-search-input');
    // REMOVED: topRightSearchButton reference

    // --- Audio Player State ---
    let currentAudio = null; let currentlyPlayingButton = null; let currentlyPlayingProgressBar = null; let currentlyPlayingTimer = null; let currentlyPlayingProgressWrapper = null;
    const randomSearchTerms = ["star", "blue", "fire", "dream", "night", "sun", "moon", "walk", "run", "road", "sky", "ocean", "heart", "mind", "time", "light", "dark", "rain", "wind", "home", "lost", "found", "magic", "forever", "again"];

    // --- Helper Functions ---
    function createAudioPlayer() { if (!currentAudio) { currentAudio = new Audio(); currentAudio.addEventListener('ended', handleAudioEnd); currentAudio.addEventListener('error', handleAudioError); currentAudio.addEventListener('timeupdate', handleTimeUpdate); } }
    function formatTime(seconds) { const minutes = Math.floor(seconds / 60); const remainingSeconds = Math.floor(seconds % 60); const paddedSeconds = String(remainingSeconds).padStart(2, '0'); return `${minutes}:${paddedSeconds}`; }
    function handleAudioEnd() { stopAndResetAudio(); }
    function handleAudioError(e) { console.error("Audio Error:", e); if (messageArea.style.display !== 'block' || messageArea.textContent.includes('Search failed')) { messageArea.textContent = 'Could not play audio preview.'; messageArea.style.display = 'block'; } else { console.warn("Audio playback failed."); } stopAndResetAudio(); }
    function handleTimeUpdate() { if (currentAudio && !isNaN(currentAudio.duration) && currentAudio.duration > 0) { if (currentlyPlayingProgressBar) { const progressPercent = (currentAudio.currentTime / currentAudio.duration) * 100; currentlyPlayingProgressBar.value = progressPercent; } if (currentlyPlayingTimer) { const remainingTime = currentAudio.duration - currentAudio.currentTime; const displayTime = Math.max(0, remainingTime); currentlyPlayingTimer.textContent = formatTime(displayTime); } } else { if (currentlyPlayingProgressBar) currentlyPlayingProgressBar.value = 0; if (currentlyPlayingTimer) currentlyPlayingTimer.textContent = formatTime(currentAudio?.duration || 30); } }
    function stopAndResetAudio() { if (currentAudio && !currentAudio.paused) { currentAudio.pause(); } if (currentlyPlayingButton) { currentlyPlayingButton.textContent = 'Play'; currentlyPlayingButton.classList.remove('playing'); currentlyPlayingButton = null; } if (currentlyPlayingProgressWrapper) { currentlyPlayingProgressWrapper.style.display = 'none'; } if (currentlyPlayingProgressBar) { currentlyPlayingProgressBar.value = 0; } if (currentlyPlayingTimer) { currentlyPlayingTimer.textContent = formatTime(currentAudio?.duration || 30); } currentlyPlayingProgressBar = null; currentlyPlayingTimer = null; currentlyPlayingProgressWrapper = null; }
    function handleProgressClick(event) { const progressBar = event.target; if (progressBar !== currentlyPlayingProgressBar || !currentAudio || !(currentAudio.duration > 0)) { return; } const clickX = event.offsetX; const barWidth = progressBar.offsetWidth; const seekFraction = clickX / barWidth; const targetTime = seekFraction * currentAudio.duration; currentAudio.currentTime = targetTime; }

    // --- View Management Functions ---
    function showSearchView() { resultsView.style.opacity = '0'; stopAndResetAudio(); previewDisclaimer.style.display = 'none'; pageTopLogo.style.display = 'none'; searchAnotherBtn.style.display = 'none'; topRightSearchContainer.style.display = 'none'; setTimeout(() => { resultsView.style.display = 'none'; searchView.style.display = 'flex'; setTimeout(() => { searchView.style.opacity = '1'; }, 50); }, 300); searchInput.focus(); topRightSearchInput.value = ''; }
    function showResultsLoadingView(displayTitle, query = "") { stopAndResetAudio(); resultsTitle.textContent = displayTitle; queryDisplay.textContent = query; queryDisplay.style.display = query ? 'inline' : 'none'; searchView.style.opacity = '0'; pageTopLogo.style.display = 'block'; searchAnotherBtn.style.display = 'none'; topRightSearchContainer.style.display = 'flex'; topRightSearchInput.value = ''; setTimeout(() => { searchView.style.display = 'none'; }, 300); resultsList.innerHTML = ''; previewDisclaimer.style.display = 'none'; messageArea.style.display = 'none'; loadingIndicator.textContent = `Finding ${query ? query : 'a random song'}...`; loadingIndicator.style.display = 'block'; resultsView.style.display = 'flex'; setTimeout(() => { resultsView.style.opacity = '1'; }, 50); window.scrollTo(0, 0); }


    // --- Core Application Logic ---
    function displayResults(items) { /* ... (no changes needed here) ... */ resultsList.innerHTML = ''; loadingIndicator.style.display = 'none'; stopAndResetAudio(); searchAnotherBtn.style.display = 'none'; const isRandomMode = resultsTitle.textContent.includes("Random Song"); if (!items || items.length === 0) { messageArea.textContent = isRandomMode ? 'Could not find random song. Try again!' : 'No results found.'; messageArea.style.display = 'block'; previewDisclaimer.style.display = 'none'; pageTopLogo.style.display = 'block'; return; } previewDisclaimer.style.display = 'block'; messageArea.style.display = 'none'; pageTopLogo.style.display = 'block'; if (isRandomMode && items.length === 1) searchAnotherBtn.style.display = 'block'; items.forEach(item => { const resultItemDiv = document.createElement('div'); resultItemDiv.className = 'result-item'; const artwork = document.createElement('img'); artwork.src = item.artworkUrl100 || item.artworkUrl60 || 'placeholder.png'; artwork.alt = item.trackName ? `Art for ${item.trackName}` : 'Album art'; artwork.loading = 'lazy'; const resultInfoDiv = document.createElement('div'); resultInfoDiv.className = 'result-info'; const title = document.createElement('h3'); const titleLink = document.createElement('a'); titleLink.href = item.trackViewUrl || item.collectionViewUrl || '#'; titleLink.textContent = item.trackName || item.collectionName || 'Unknown Title'; titleLink.target = '_blank'; titleLink.rel = 'noopener noreferrer'; title.appendChild(titleLink); const artist = document.createElement('p'); artist.className = 'artist-name'; artist.textContent = item.artistName || 'Unknown Artist'; const album = document.createElement('p'); album.className = 'album-name'; album.textContent = item.kind === 'song' ? (item.collectionName || 'Single') : (item.primaryGenreName || item.kind || ''); const playButton = document.createElement('button'); playButton.className = 'play-button'; playButton.textContent = 'Play'; if (item.previewUrl) { playButton.dataset.previewUrl = item.previewUrl; } else { playButton.disabled = true; playButton.title = "Preview not available"; } const progressWrapper = document.createElement('div'); progressWrapper.className = 'progress-wrapper'; const progressBar = document.createElement('progress'); progressBar.className = 'preview-progress'; progressBar.value = 0; progressBar.max = 100; const timerSpan = document.createElement('span'); timerSpan.className = 'preview-timer'; timerSpan.textContent = formatTime(30); progressWrapper.appendChild(progressBar); progressWrapper.appendChild(timerSpan); resultInfoDiv.appendChild(title); resultInfoDiv.appendChild(artist); resultInfoDiv.appendChild(album); resultInfoDiv.appendChild(playButton); resultInfoDiv.appendChild(progressWrapper); resultItemDiv.appendChild(artwork); resultItemDiv.appendChild(resultInfoDiv); resultsList.appendChild(resultItemDiv); }); }
    async function performSearch(query) { /* ... (no changes needed here) ... */ const trimmedQuery = query.trim(); if (trimmedQuery === '') return; stopAndResetAudio(); showResultsLoadingView("Results for", trimmedQuery); const encodedQuery = encodeURIComponent(trimmedQuery); const limit = 25; const apiUrl = `https://itunes.apple.com/search?term=${encodedQuery}&media=music&entity=song&limit=${limit}&country=us`; try { const response = await fetch(apiUrl, { cache: 'no-cache' }); if (!response.ok) throw new Error(`Network response was not ok. Status: ${response.status}`); const data = await response.json(); displayResults(data.results); } catch (error) { console.error('Search failed:', error); loadingIndicator.style.display = 'none'; resultsList.innerHTML = ''; previewDisclaimer.style.display = 'none'; searchAnotherBtn.style.display = 'none'; messageArea.textContent = `Search failed: ${error.message}. Check connection or try again.`; messageArea.style.display = 'block'; pageTopLogo.style.display = 'block'; stopAndResetAudio(); } }
    async function fetchAndShowRandomSong() { /* ... (no changes needed here) ... */ stopAndResetAudio(); showResultsLoadingView("Random Song"); const randomIndex = Math.floor(Math.random() * randomSearchTerms.length); const randomTerm = randomSearchTerms[randomIndex]; console.log(`Using random search term: "${randomTerm}"`); const limit = 200; const encodedQuery = encodeURIComponent(randomTerm); const apiUrl = `https://itunes.apple.com/search?term=${encodedQuery}&media=music&entity=song&limit=${limit}&country=us`; try { console.log(`Fetching random pool: ${apiUrl}`); const response = await fetch(apiUrl, { cache: 'no-cache' }); if (!response.ok) throw new Error(`Network response was not ok. Status: ${response.status}`); const data = await response.json(); console.log("Random Pool Response:", data); if (data.results && data.results.length > 0) { const randomSongIndex = Math.floor(Math.random() * data.results.length); const randomSong = data.results[randomSongIndex]; console.log("Selected Random Song:", randomSong); displayResults([randomSong]); } else { console.warn(`Random search for "${randomTerm}" returned no results.`); displayResults([]); } } catch (error) { console.error('Random song fetch failed:', error); loadingIndicator.style.display = 'none'; resultsList.innerHTML = ''; previewDisclaimer.style.display = 'none'; searchAnotherBtn.style.display = 'none'; messageArea.textContent = `Failed to get random song: ${error.message}. Please try again.`; messageArea.style.display = 'block'; pageTopLogo.style.display = 'block'; stopAndResetAudio(); } }

    // --- Event Listeners ---
    searchForm.addEventListener('submit', function(event) { event.preventDefault(); if (event.submitter && event.submitter.id === 'random-song-btn') { fetchAndShowRandomSong(); } else { const query = searchInput.value; if (query.trim() === '') { searchInput.focus(); return; } performSearch(query); } });
    pageTopLogo.addEventListener('click', function() { showSearchView(); });
    searchAnotherBtn.addEventListener('click', function() { fetchAndShowRandomSong(); });
    resultsList.addEventListener('click', function(event) { const target = event.target; if (target.classList.contains('play-button') && !target.disabled) { createAudioPlayer(); const previewUrl = target.dataset.previewUrl; const resultItem = target.closest('.result-item'); const progressWrapper = resultItem ? resultItem.querySelector('.progress-wrapper') : null; const progressBar = progressWrapper ? progressWrapper.querySelector('.preview-progress') : null; const timerSpan = progressWrapper ? progressWrapper.querySelector('.preview-timer') : null; if (currentlyPlayingButton === target) { if (currentAudio.paused) { currentAudio.play().catch(handleAudioError); target.textContent = 'Pause'; target.classList.add('playing'); if(progressWrapper) progressWrapper.style.display = 'flex'; } else { currentAudio.pause(); target.textContent = 'Play'; target.classList.remove('playing'); } } else { stopAndResetAudio(); currentAudio.src = previewUrl; currentAudio.play().catch(handleAudioError); target.textContent = 'Pause'; target.classList.add('playing'); currentlyPlayingButton = target; if (progressWrapper) { currentlyPlayingProgressWrapper = progressWrapper; currentlyPlayingProgressBar = progressBar; currentlyPlayingTimer = timerSpan; currentlyPlayingProgressWrapper.style.display = 'flex'; if(currentlyPlayingProgressBar) currentlyPlayingProgressBar.value = 0; if(currentlyPlayingTimer) currentlyPlayingTimer.textContent = formatTime(30); } else { currentlyPlayingProgressWrapper = null; currentlyPlayingProgressBar = null; currentlyPlayingTimer = null; } } } else if (target.classList.contains('preview-progress')) { handleProgressClick(event); } });

    // Listener for the Top-Right Search Form (triggers on Enter in input)
    topRightSearchForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent page reload
        const query = topRightSearchInput.value;
        console.log("Top-right search submitted with:", query);
        if (query.trim() === '') {
            topRightSearchInput.focus();
            return;
        }
        performSearch(query);
        // Clear the input after search is submitted
        topRightSearchInput.value = '';
    });


     // --- Initial Application Setup ---
     function initializeApp() { searchView.style.display = 'flex'; searchView.style.opacity = '1'; resultsView.style.display = 'none'; resultsView.style.opacity = '0'; previewDisclaimer.style.display = 'none'; pageTopLogo.style.display = 'none'; searchAnotherBtn.style.display = 'none'; topRightSearchContainer.style.display = 'none'; searchInput.focus(); console.log("App Ready."); }
     initializeApp();

}); // End DOMContentLoaded